#!/bin/sh
# BEGIN_ICS_COPYRIGHT8 ****************************************
# 
# Copyright (c) 2015, Intel Corporation
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# END_ICS_COPYRIGHT8   ****************************************

# This performs a series of stressful tests designed to exercise the
# credit exchange system

trap "exit 1" SIGHUP SIGTERM SIGINT

CURTIME=`date +%d%b%y%H%M%S`
if [ ! -d logs ]
then
	`mkdir logs`
fi
if [ -z "$1" ]
then 
	echo " Usage: run_stress number_processes [max_size]"
	echo " For example: ./run_stress 2"
	exit 1
else
	NUM_PROCESSES=$1
fi
if [ -z $2 ]
then 
	MAX_SIZE=4194304
	echo " Setting the default Maximum Message Size to $MAX_SIZE"
else
	MAX_SIZE=$2
fi
LOGFILE=$PWD/logs/log.$CURTIME
echo " Running MPI tests with 2 processes"
echo " logfile $LOGFILE"
> $LOGFILE

#MPI_RUN_CMD="/opt/opa/bin/mpirun_rsh -paramfile /etc/sysconfig/mpi.param -hostfile mpi_hosts "
MPI_RUN_CMD="mpiexec -env I_MPI_DEVICE rdma"
LATENCY_CMD="latency/latency"
BANDWIDTH_CMD="bandwidth/bw"
PMB_CMD="PMB2.2.1/SRC_PMB/PMB-MPI1"
#MPI_RUN_CMD_HPL="/opt/opa/bin/mpirun_rsh -np $NUM_PROCESSES -paramfile $PWD/mpi.param.hpl -hostfile $PWD/mpi_hosts "
MPI_RUN_CMD_HPL="mpiexec -n $NUM_PROCESSES -env I_MPI_DEVICE rdma"
HPL_DIR="hpl/bin/ICS.`uname -s`"
HPL_CMD="./xhpl"

echo " Running Latency ..." | tee -a $LOGFILE
echo " Using: $MPI_RUN_CMD -n 2 $LATENCY_CMD LOOPS SIZE" >> $LOGFILE
	loops=10000
	size=0
	while [ "$size" -le "$MAX_SIZE" ]
	do
		echo " Running Latency for size $size"
		set -x
		$MPI_RUN_CMD -n 2 $LATENCY_CMD $loops $size 2>&1|tee -i -a $LOGFILE
		set +x
		if [ $size -lt 8 ]
		then
			size=`expr $size + 1`
		elif [ $size -lt 2048 ]
		then
			loops=5000
    		size=`expr $size + $size`
		elif [ $size -lt 1000000 ]
		then
			loops=1000
    		size=`expr $size + $size`
		else
			loops=20
    		size=`expr $size + $size`
		fi
	done
	echo "########################################### " >> $LOGFILE
sleep 1
wait


echo " Running Bandwidth ..." | tee -a $LOGFILE
echo " Using: $MPI_RUN_CMD -n 2 $BANDWIDTH_CMD LOOPS SIZE" >> $LOGFILE
	loops=1000
	size=1024
	while [ "$size" -le "$MAX_SIZE" ]
	do
		echo " Running Bandwidth for size $size"
		set -x
		$MPI_RUN_CMD -n 2 $BANDWIDTH_CMD $loops $size 2>&1|tee -i -a $LOGFILE
		set +x
    	size=`expr $size + $size`
	done
	echo "########################################### " >> $LOGFILE
sleep 5
wait


echo " Running High Performance Computing Linkpack Benchmark (HPL) ..." | tee -a $LOGFILE
./config_hpl ${NUM_PROCESSES}s
	(
		set -x
		cd $HPL_DIR; $MPI_RUN_CMD_HPL $HPL_CMD
		set +x
	) 2>&1 | tee -i -a $LOGFILE
	echo "########################################### " >> $LOGFILE
sleep 1
wait


echo " Running Pallas ..." | tee -a $LOGFILE
	(
		set -x
		$MPI_RUN_CMD -n $NUM_PROCESSES $PMB_CMD
		set +x
	) 2>&1 | tee -i -a $LOGFILE
	echo "########################################### " >> $LOGFILE
